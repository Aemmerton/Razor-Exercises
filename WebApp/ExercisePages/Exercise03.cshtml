@*Make sure Validators catch errors before the user inputs try to put new data in database*@

@{
    Layout = "~/_Layout.cshtml";
    Page.Title = string.Format("Razor - {0}", "Exercise 03");

    var pid = Request.QueryString["pid"];

    int artistid; // changed to int

    var albumname = "";
    var artistname = "0";
    var albumyear = ""; // changed to int
    var albumlabel = "";
    var thebutton = Request.Form["FormButton"];
    var cid = Request.QueryString["cid"];
    var message = "";

    //these are validator controls execute on the server side

    Validation.Add("Title",
         Validator.Required("Title is required"),
         Validator.StringLength(160, 1, "Title name is limited to 160 characters"));

    Validation.Add("Artist",
         Validator.Required("You must choose an artist from the list"),
         Validator.Range(1, 275, "You Must choose an artist from the list"));
    

    Validation.Add("Year",
        Validator.Required("Album Year is required"),
        Validator.Integer("Album Year must be a number."),
        Validator.Range(1950, 2020, "Album Year must be between 1950 and 2020"));

    Validation.Add("Label",
         Validator.StringLength(50, 0, "Label name is limited to 50 characters"));



    var db = Database.Open("CHINOOK");

    var artistName = "SELECT ArtistId, Name FROM Artists";
    var queryArtists = db.Query(artistName, cid);

}

@section banner {
    <h1>@Page.Title</h1>
}

@if (IsPost)
{
    // retreive the data from the form
    albumname = Request.Form["Title"];
    artistname = Request.Form["Artist"];
    albumyear = Request.Form["Year"];
    albumlabel = Request.Form["Label"];


    //when you have multiple buttons, a good practice is to determine
    //    what action to do for the press button FIRST!
    if (thebutton.Equals("Clear"))
    {
        //empty the form fields
        albumname = "";
        artistname = "0";
        albumyear = "";
        albumlabel = "";
    }
    else
    {
        //Validation of data
        //Validation.IsValid() is used to execute the server side validation
        //the if statement DOES NOT need an else as the Validation control
        //      message will appear in your Summary() or Message() controls
        if (Validation.IsValid())
        {
            //you may have logical validation needed for your data that cannot
            //be accomplished using Validation Controls or HTML5
            //this type of validation is a programmed validation

            //assume that the categoryid is a required field
            var valid = true;
            if (artistname.Equals("0"))
            {
                valid = false;
                <div class="col-12 text-center">
                    <p style="color:darkslateblue">
                        You must select an Artist
                    </p>
                </div>
            }
            //check validation result
            if (valid)
            {
                //good data
                try
                {
                    //connect to the database
                    //  done above
                    //create sql command
                    var inscommand = @"INSERT INTO Albums (Title, ArtistId, ReleaseYear,
    ReleaseLabel)
    VALUES(@0, @1, @2, @3)";
                    //execute the command
                    db.Execute(inscommand, albumname,
                        artistname.Equals("0") ? null : artistname,
                        string.IsNullOrEmpty(albumyear) ? null : albumyear,
                        string.IsNullOrEmpty(albumlabel) ? null : albumlabel);
                    <div class="col-12 text-center">
                        <p style="color:green">
                            Album has been added
                        </p>
                    </div>
                }
                catch (Exception ex)
                {
                    <div class="col-12 text-center">
                        <p style="color:firebrick; font-size:large">
                            Processing error: @ex.Message
                        </p>
                    </div>
                }
            }

        }

    }

}

@Html.ValidationSummary()

<form id="theForm" action="" method="post">

    <div class="row row-cols-2">
        <div class="col text-right">
            <label id="lblTitle" for="Title"><b>Title:</b></label>
        </div>
        <div class="col text-left">
            <input type="text" name="Title" value="" />
        </div><br />
        <div class="col text-right">
            <label id="lblArtist" for="Artist"><b>Artist:</b></label>
        </div>
        <div class="col text-left">
            <select name="Artist">
                <option value="0">select...</option>
                @foreach (var row in queryArtists)
                {
                    <option value="@row.ArtistId">@row.Name</option>

                }
            </select>
        </div><br />
        <div class="col text-right">
            <label id="lblAlbumYear" for="Year"><b>Year:</b></label>
        </div>
        <div class="col text-left">
            <input type="text" name="Year" value="" />
        </div><br />
        <div class="col text-right">
            <label id="lblRecordLabel" for="Label"><b>Label:</b></label>
        </div>
        <div class="col text-left">
            <input type="text" name="Label" value="" />
        </div><br />

        <div class="row">
            <div class="col text-right">
                <input type="submit" id="FormButton" name="FormButton"
                       class="btn btn-primary" value="Add" />
                <input type="submit" id="FormButton" name="FormButton" formnovalidate
                       class="btn" value="Clear" />
            </div>
        </div>

</form>
